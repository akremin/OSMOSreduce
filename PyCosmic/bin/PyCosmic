#! /usr/bin/env python

# Copyright 2012 Bernd Husemann
#
#
#This file is part of PyCosmic.
#
#PyCosmic is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License  as published by
#the Free Software Foundation, either version 3 of the License, or
#any later version.
#
#PyCosmic is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with PyCosmic.  If not, see <http://www.gnu.org/licenses/>.

__version__ = "0.4"

import argparse
import PyCosmic


parser = argparse.ArgumentParser(description="""
Programm to detects cosmics in single exposure CCD frames. Important: The image and the readout noise are assumed to be in units of electrons.
The image also needs to be BIAS subtracted! The gain can be entered to convert the image from ADUs to electros, when this is down already set gain=1.0 as the default. A bad pixel mask of cosmics and a cleaned image will be provided by the routine as an output.""", formatter_class=argparse.ArgumentDefaultsHelpFormatter,prog='PyCosmic',version='PyCosmic version .%s'%(__version__))

parser.add_argument("raw", type=str, help="""File name of the CCD raw frame FITS file from which to detect and reject cosmic ray hits. This frame is expected to be BIAS subtracted. If it is not provided in units of electrons please provide the appropriate gain factor to convert from ADUs to electrons with the --gain parameter.
""")
parser.add_argument("clean", type=str, help="""File name of the cosmics cleaned frame to be stored as a FITS file.
""")
parser.add_argument("mask", type=str, help="""File name of the cosmics mask  frame to be stored as a FITS file.
""")
parser.add_argument("rdnoise", type=str, help="""Header keyword of the CCD read-out noise in electrons or alternatively the corresponding value as float number.
""")
parser.add_argument("--siglim", type=float, default=5.0, help="""Threshold value for the significance level of cosmics in units of the expected noise for the pixels.
The default
is 5.0.""")
parser.add_argument("--fwhm", type=float,  default=2.0, help="""FWHM in pixels of the Gaussian convolution kernel used for the detection of cosmics. Should always been smaller than the FWHM of the instrumental PSF.
The default
is 2.0.""")
parser.add_argument("--rlim", type=float, default=1.2, help="""Threshold value for the contrast value of cosmics against the smooth signal of the object. The optimal value depends on the FWHM of the instrument PSF and the FWHM of the 
Gaussian smoothing kernel, i.e. --fwhm.
Default
is 1.2.""")
parser.add_argument("--iter", type=int, default=5, help="""Number of iteration to be performed by the algorithms. Usually 5-6 iterations are needed to converge to a stable solution.
Default
is 5.""")
parser.add_argument("--replacebox", type=int, nargs=2,  default=[5,5], help="""Size of the subimage (x and y-axis) around a detected cosmic ray pixel used to estimate a median value  from the unaffacted pixel in order to produce a cleaned frame. 
The default
is 5,5.""")
parser.add_argument("--radius", type=int, default=0, help="""Number of neighboring pixel used to increase the boundaries of the detected cosmics. Should only be used if considered to be absolutely necessary.
The default
is 0.""")
parser.add_argument("--gain", type=str, default='1.0', help="""Header keyword of the CCD gain or alternatively the corresponding value as float number when the bias-subtracted image was not yet converted to electron. The default is 1.0
""")
parser.add_argument("--parallel", action="store_true", default=False, help="""Flag to use 2 CPUs cores in parallel for the computations to speed up the process. The default is False.""")
parser.add_argument("--verbose", action="store_true", default=False, help="""Flag to print some progress information on the screen. The default is False.""")


args = parser.parse_args()

PyCosmic.detCos(args.raw, args.mask, args.clean, args.rdnoise, gain=args.gain, sigma_det=args.siglim,  rlim=args.rlim, iter=args.iter, fwhm_gauss=args.fwhm, replace_box=args.replacebox,    increase_radius=args.radius, parallel=args.parallel, verbose=args.verbose)

